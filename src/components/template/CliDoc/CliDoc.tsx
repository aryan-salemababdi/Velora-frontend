'use client';
 
import { Heading } from '@/components/atom/Heading/Heading';
import { motion } from 'framer-motion';
const CliDoc = () => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="prose prose-invert max-w-4xl"
    >
      <Heading level={1}>üñ•Ô∏è Velora CLI</Heading>

      <p className="text-gray-300">
        <span className="text-[#00ADD8] font-semibold">Velora</span> provides a
        command line interface (CLI) to quickly scaffold projects and modules.
        The CLI helps you bootstrap a new application or generate new resources
        without writing boilerplate code manually.
      </p>

      <Heading className="my-12" level={2}>
        üì¶ Installation
      </Heading>
      <pre className="bg-[#112240] text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
        <code>go install github.com/aryan-salemababdi/Velora@latest</code>
      </pre>

      <p className="text-gray-300 my-5">After installing, verify with:</p>
      <pre className="bg-[#112240] text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
        <code>velora --help</code>
      </pre>

      <div className="bg-[#2D1B1B] border-l-4 border-red-500 text-gray-300 p-4 rounded-lg my-6">
        ‚ö†Ô∏è <strong>Ensure your Go bin path is in $PATH</strong>:
        <pre className="bg-[#1E1E1E] text-gray-100 p-3 rounded-lg overflow-x-auto mt-3 text-sm">
          {`echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> ~/.zshrc
source ~/.zshrc`}
        </pre>
        <p className="text-gray-400 mt-2 text-sm">
          (Add it permanently in <code>~/.zshrc</code> or <code>~/.bashrc</code>
          )
        </p>
      </div>

      <Heading className="my-12" level={2}>
        üöÄ Create a New App
      </Heading>
      <p className="text-gray-300 my-5">
        Use the <code>new</code> command to scaffold a new Velora application:
      </p>

      <pre className="bg-[#112240] text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
        <code>velora new myapp</code>
      </pre>

      <p className="text-gray-300 my-5">
        This creates a new directory <code>myapp</code> with:
      </p>
      <ul className="list-disc list-inside text-gray-300 space-y-2">
        <li>
          <code>main.go</code> ‚Äì application entrypoint
        </li>
        <li>
          <code>app/</code> ‚Äì default module with service, controller, and DTO
        </li>
        <li>
          <code>__tests__/</code> ‚Äì basic tests for service and controller
        </li>
      </ul>

      <Heading className="my-12" level={2}>
        üß© Generate a Module
      </Heading>
      <p className="text-gray-300 my-5">
        Use the <code>g module</code> command to scaffold a new module:
      </p>

      <pre className="bg-[#112240] text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
        <code>velora g module user</code>
      </pre>

      <p className="text-gray-300 my-5">This generates:</p>
      <ul className="list-disc list-inside text-gray-300 space-y-2">
        <li>
          <code>user.service.go</code>
        </li>
        <li>
          <code>user.controller.go</code>
        </li>
        <li>
          <code>user.module.go</code>
        </li>
        <li>
          <code>dto/user.dto.go</code>
        </li>
        <li>
          <code>__tests__/user.*_test.go</code>
        </li>
      </ul>

      <Heading className="my-12" level={2}>
        üîë Example
      </Heading>
      <p className="text-gray-300 my-5">
        Example service generated by <code>velora g module user</code>:
      </p>
      <pre className="bg-[#112240] text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
        <code>
          {`package user

type Service struct{}

func NewService() *Service { return &Service{} }

func (s *Service) FindAll() []string {
    return []string{"example"}
}`}
        </code>
      </pre>

      <Heading className="my-12" level={2}>
        üîß Troubleshooting
      </Heading>
      <ul className="list-disc list-inside text-gray-300 space-y-2">
        <li>
          If <code>velora</code> command is not found ‚Üí check your{' '}
          <code>$PATH</code>.
        </li>
        <li>
          If <code>go install</code> fails ‚Üí ensure Go version &gt;= 1.21 is
          installed.
        </li>
        <li>
          If modules don‚Äôt register ‚Üí verify you added them in{' '}
          <code>main.go</code>.
        </li>
      </ul>

      <Heading className="my-12" level={2}>
        üìñ Summary
      </Heading>
      <ul className="list-disc list-inside text-gray-300 space-y-2">
        <li>
          <code>velora new [name]</code> ‚Üí creates a new Velora app
        </li>
        <li>
          <code>velora g module [name]</code> ‚Üí generates a module scaffold
        </li>
        <li>
          Each module includes service, controller, module, DTO, and tests
        </li>
      </ul>

      <p className="mt-6 text-gray-400">
        Next: learn how to configure{' '}
        <a
          href="/documentation/middlewares"
          className="text-[#00ADD8] underline"
        >
          middlewares
        </a>{' '}
        and{' '}
        <a href="/documentation/modules" className="text-[#00ADD8] underline">
          modules
        </a>{' '}
        in your Velora app.
      </p>
    </motion.div>
  );
};

export default CliDoc;
